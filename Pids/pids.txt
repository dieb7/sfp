// Packet IDs. Declare byte value in hex or increment from last one by ++

	ACK_BIT		0x80	used for indicating SPS frames
	SPS_BIT		0x40	used for indicating type of an SPS frame
	PID_BITS	(0xFF&(~(ACK_BIT|SPS_BIT)))	used to mask off upper bits
//
//
	TEST_FRAME	0x00	test frame for throughput measurements
	SPS_ACK		++		confirm sps; link only - not networkable
//
	WHO_PIDS	(SPS_ACK) all pids greater than, use the who header for routing
//
	SPS			++		used for initializing SPS frame acks and setting id
//
	PING		++		to check other end
	PING_BACK	++ 		expected response to a PING
//
	GET_VERSION	++		get the version number
	VERSION_NO	++		return the version number
//
	TALK_IN		++		keyboard input to be interpreted
	TALK_OUT	++		used to send emits out usb port
	EVAL		++		evaluate text with destination; who, text
	CALL_CODE	++		call code starting at this location; who, addr32
//
	MEM_READ	++		read memory request; who, addr32, len8
	MEM_DATA	++		memory contents; who, addr32, len8
	CHECK_MEM	++		check memory contents; who, addr32, len32, method8
	MEM_CHECK	++		value returned from checking memory contents; who, addr32, len32, method8, code
	FILL_MEM	++		fill memory chunks with pattern of length bytes; who, addr32, len32, len8, pattern
//
	RAM_WRITE	++		request write to RAM; who, 32bit addr, 8bit length, bytes
	FLASH_WRITE	++		request write to flash; who, 32bit addr, 8bit length, bytes
	WRITE_CONF	++		confirm a write to memory; who, addr32, len8
//
	ERASE_MEM	++		erase memory range froms start to end
	ERASE_CONF	++		confirm memory erased (0) or not (!0)

// Must be last PID
	MAX_PIDS	++		number of PIDS defined