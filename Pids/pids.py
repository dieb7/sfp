# PID declarations  generated by parsepids.py  Oct 01, 2013  17:27:42

# packet types
ACK_BIT=0x80	# used for tagging acked frames. High bit is set for acked frames. next high bit is sfs 1 or 2
SPS_BIT=0x40	# used for indicating sfs type if an acked frame
PID_BITS=(0xFF&(~(ACK_BIT|SPS_BIT)))	# used to mask off upper bits
SPS=0x00	# used for initializing SPS frame acks
SPS_ACK=0x1	# confirm sps
WHO_ARE_YOU=0x2	# used to find out the cpu id for the other end of the link
MY_ID=0x3	# send id to requester
SET_ID=0x4	# set id of slot card - io or swb
PING=0x5	# to check other end
PING_BACK=0x6	# expected response to a PING
TEST_FRAME=0x7	# test frame for throughput measurements
NWK_LOAD_FR=0X3F	# network load frame
WHO_PIDS=0x10	# all pids greater than, use the who header for routing
GET_VERSION=0x11	# get the version number
VERSION_NO=0x12	# return the version number
ACKNOWLEDGE=0x13	# general acknowledgement
TALK_IN=0x14	# keyboard input to be interpreted
TALK_OUT=0x15	# used to send emits out usb port
EVAL=0x16	# evaluate text with destination; who, text
CALL_CODE=0x17	# call code starting at this location; who, addr32
MEM_READ=0x18	# read memory request; who, addr32, len8
MEM_DATA=0x19	# memory contents; who, addr32, len8
CHECK_MEM=0x1a	# check memory contents; who, addr32, len32, method8
MEM_CHECK=0x1b	# value returned from checking memory contents; who, addr32, len32, method8, code
FILL_MEM=0x1c	# fill memory chunks with pattern of length bytes; who, addr32, len32, len8, pattern
RAM_WRITE=0x1d	# request write to RAM; who, 32bit addr, 8bit length, bytes
FLASH_WRITE=0x1e	# request write to flash; who, 32bit addr, 8bit length, bytes
WRITE_CONF=0x1f	# confirm a write to memory; who, addr32, len8
ERASE_MEM=0x20	# erase memory range froms start to end
ERASE_CONF=0x21	# confirm memory erased (0) or not (!0)
GET_STATS=0x22	# get statistics from other end
CLEAR_STATS=0x23	# clear stats from other end
STATS=0x24	# stats
SET_GUID=0x25	# set a GUID value - array of pair of guid/value
GET_GUID=0x26	# request GUID value - array of GUIDs
GUID=0x27	# GUID followed by value - array of GUID value pairs
GET_HW_DESC=0x28	# request hardware description
HW_DESC=0x29	# return hardware description
SET_PARAM=0x2a	# set a parameter: 32 bit parameter tag followed by 32 bit value
GET_PARAM=0x2b	# get a parameter value
PARAM=0x2c	# parameter followed by value
MODBUS=0x2d	# Modbus packet id
NXFILE=0x2e	# File transfer
ALT=0x2f	# Alarms, Logs, Trends
FIRMWARE=0x30	# Deal with firmware versions

pids = {
	ACK_BIT:"ACK_BIT",	# used for tagging acked frames. High bit is set for acked frames. next high bit is sfs 1 or 2
	SPS_BIT:"SPS_BIT",	# used for indicating sfs type if an acked frame
	PID_BITS:"PID_BITS",	# used to mask off upper bits
	SPS:"SPS",	# used for initializing SPS frame acks
	SPS_ACK:"SPS_ACK",	# confirm sps
	WHO_ARE_YOU:"WHO_ARE_YOU",	# used to find out the cpu id for the other end of the link
	MY_ID:"MY_ID",	# send id to requester
	SET_ID:"SET_ID",	# set id of slot card - io or swb
	PING:"PING",	# to check other end
	PING_BACK:"PING_BACK",	# expected response to a PING
	TEST_FRAME:"TEST_FRAME",	# test frame for throughput measurements
	NWK_LOAD_FR:"NWK_LOAD_FR",	# network load frame
	WHO_PIDS:"WHO_PIDS",	# all pids greater than, use the who header for routing
	GET_VERSION:"GET_VERSION",	# get the version number
	VERSION_NO:"VERSION_NO",	# return the version number
	ACKNOWLEDGE:"ACKNOWLEDGE",	# general acknowledgement
	TALK_IN:"TALK_IN",	# keyboard input to be interpreted
	TALK_OUT:"TALK_OUT",	# used to send emits out usb port
	EVAL:"EVAL",	# evaluate text with destination; who, text
	CALL_CODE:"CALL_CODE",	# call code starting at this location; who, addr32
	MEM_READ:"MEM_READ",	# read memory request; who, addr32, len8
	MEM_DATA:"MEM_DATA",	# memory contents; who, addr32, len8
	CHECK_MEM:"CHECK_MEM",	# check memory contents; who, addr32, len32, method8
	MEM_CHECK:"MEM_CHECK",	# value returned from checking memory contents; who, addr32, len32, method8, code
	FILL_MEM:"FILL_MEM",	# fill memory chunks with pattern of length bytes; who, addr32, len32, len8, pattern
	RAM_WRITE:"RAM_WRITE",	# request write to RAM; who, 32bit addr, 8bit length, bytes
	FLASH_WRITE:"FLASH_WRITE",	# request write to flash; who, 32bit addr, 8bit length, bytes
	WRITE_CONF:"WRITE_CONF",	# confirm a write to memory; who, addr32, len8
	ERASE_MEM:"ERASE_MEM",	# erase memory range froms start to end
	ERASE_CONF:"ERASE_CONF",	# confirm memory erased (0) or not (!0)
	GET_STATS:"GET_STATS",	# get statistics from other end
	CLEAR_STATS:"CLEAR_STATS",	# clear stats from other end
	STATS:"STATS",	# stats
	SET_GUID:"SET_GUID",	# set a GUID value - array of pair of guid/value
	GET_GUID:"GET_GUID",	# request GUID value - array of GUIDs
	GUID:"GUID",	# GUID followed by value - array of GUID value pairs
	GET_HW_DESC:"GET_HW_DESC",	# request hardware description
	HW_DESC:"HW_DESC",	# return hardware description
	SET_PARAM:"SET_PARAM",	# set a parameter: 32 bit parameter tag followed by 32 bit value
	GET_PARAM:"GET_PARAM",	# get a parameter value
	PARAM:"PARAM",	# parameter followed by value
	MODBUS:"MODBUS",	# Modbus packet id
	NXFILE:"NXFILE",	# File transfer
	ALT:"ALT",	# Alarms, Logs, Trends
	FIRMWARE:"FIRMWARE"	# Deal with firmware versions
}