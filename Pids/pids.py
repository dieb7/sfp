# PID declarations  generated by parsepids.py  Mar 10, 2015  17:17:08

# packet types
ACK_BIT=0x80	# used for indicating SPS frames
SPS_BIT=0x40	# used for indicating type of an SPS frame
PID_BITS=(0xFF&(~(ACK_BIT|SPS_BIT)))	# used to mask off upper bits
TEST_FRAME=0x00	# test frame for throughput measurements
SPS_ACK=0x1	# confirm sps; link only - not networkable
WHO_PIDS=(SPS_ACK)	# all pids greater than, use the who header for routing
SPS=0x2	# used for initializing SPS frame acks and setting id
PING=0x3	# to check other end
PING_BACK=0x4	# expected response to a PING
GET_VERSION=0x5	# get the version number
VERSION_NO=0x6	# return the version number
TALK_IN=0x7	# keyboard input to be interpreted
TALK_OUT=0x8	# used to send emits out usb port
EVAL=0x9	# evaluate text with destination; who, text
CALL_CODE=0xa	# call code starting at this location; who, addr32
MEM_READ=0xb	# read memory request; who, addr32, len8
MEM_DATA=0xc	# memory contents; who, addr32, len8
CHECK_MEM=0xd	# check memory contents; who, addr32, len32, method8
MEM_CHECK=0xe	# value returned from checking memory contents; who, addr32, len32, method8, code
FILL_MEM=0xf	# fill memory chunks with pattern of length bytes; who, addr32, len32, len8, pattern
RAM_WRITE=0x10	# request write to RAM; who, 32bit addr, 8bit length, bytes
FLASH_WRITE=0x11	# request write to flash; who, 32bit addr, 8bit length, bytes
WRITE_CONF=0x12	# confirm a write to memory; who, addr32, len8
ERASE_MEM=0x13	# erase memory range froms start to end
ERASE_CONF=0x14	# confirm memory erased (0) or not (!0)
MAX_PIDS=0x15	# number of PIDS defined

pids = {
	ACK_BIT:"ACK_BIT",	# used for indicating SPS frames
	SPS_BIT:"SPS_BIT",	# used for indicating type of an SPS frame
	PID_BITS:"PID_BITS",	# used to mask off upper bits
	TEST_FRAME:"TEST_FRAME",	# test frame for throughput measurements
	SPS_ACK:"SPS_ACK",	# confirm sps; link only - not networkable
	WHO_PIDS:"WHO_PIDS",	# all pids greater than, use the who header for routing
	SPS:"SPS",	# used for initializing SPS frame acks and setting id
	PING:"PING",	# to check other end
	PING_BACK:"PING_BACK",	# expected response to a PING
	GET_VERSION:"GET_VERSION",	# get the version number
	VERSION_NO:"VERSION_NO",	# return the version number
	TALK_IN:"TALK_IN",	# keyboard input to be interpreted
	TALK_OUT:"TALK_OUT",	# used to send emits out usb port
	EVAL:"EVAL",	# evaluate text with destination; who, text
	CALL_CODE:"CALL_CODE",	# call code starting at this location; who, addr32
	MEM_READ:"MEM_READ",	# read memory request; who, addr32, len8
	MEM_DATA:"MEM_DATA",	# memory contents; who, addr32, len8
	CHECK_MEM:"CHECK_MEM",	# check memory contents; who, addr32, len32, method8
	MEM_CHECK:"MEM_CHECK",	# value returned from checking memory contents; who, addr32, len32, method8, code
	FILL_MEM:"FILL_MEM",	# fill memory chunks with pattern of length bytes; who, addr32, len32, len8, pattern
	RAM_WRITE:"RAM_WRITE",	# request write to RAM; who, 32bit addr, 8bit length, bytes
	FLASH_WRITE:"FLASH_WRITE",	# request write to flash; who, 32bit addr, 8bit length, bytes
	WRITE_CONF:"WRITE_CONF",	# confirm a write to memory; who, addr32, len8
	ERASE_MEM:"ERASE_MEM",	# erase memory range froms start to end
	ERASE_CONF:"ERASE_CONF",	# confirm memory erased (0) or not (!0)
	MAX_PIDS:"MAX_PIDS"	# number of PIDS defined
}