// PID declarations  generated by parsepids.py  Oct 01, 2013  17:27:42

#ifndef PID_H
#define PID_H

#define ACK_BIT 0x80 	// used for tagging acked frames. High bit is set for acked frames. next high bit is sfs 1 or 2
#define SPS_BIT 0x40 	// used for indicating sfs type if an acked frame
#define PID_BITS (0xFF&(~(ACK_BIT|SPS_BIT))) 	// used to mask off upper bits
#define SPS 0x00 	// used for initializing SPS frame acks
#define SPS_ACK 0x1 	// confirm sps
#define WHO_ARE_YOU 0x2 	// used to find out the cpu id for the other end of the link
#define MY_ID 0x3 	// send id to requester
#define SET_ID 0x4 	// set id of slot card - io or pm
#define PING 0x5 	// to check other end
#define PING_BACK 0x6 	// expected response to a PING
#define TEST_FRAME 0x7 	// test frame for throughput measurements
#define NWK_LOAD_FR 0X3F 	// network load frame
#define WHO_PIDS 0x10 	// all pids greater than, use the who header for routing
#define GET_VERSION 0x11 	// get the version number
#define VERSION_NO 0x12 	// return the version number
#define ACKNOWLEDGE 0x13 	// general acknowledgement
#define TALK_IN 0x14 	// keyboard input to be interpreted
#define TALK_OUT 0x15 	// used to send emits out usb port
#define EVAL 0x16 	// evaluate text with destination; who, text
#define CALL_CODE 0x17 	// call code starting at this location; who, addr32
#define MEM_READ 0x18 	// read memory request; who, addr32, len8
#define MEM_DATA 0x19 	// memory contents; who, addr32, len8
#define CHECK_MEM 0x1a 	// check memory contents; who, addr32, len32
#define MEM_CHECK 0x1b 	// value returned from checking memory contents; who, addr32, len32, code32
#define FILL_MEM 0x1c 	// fill memory chunks with pattern of length bytes; who, addr32, len32, len8, pattern
#define RAM_WRITE 0x1d 	// request write to RAM; who, 32bit addr, 8bit length, bytes
#define FLASH_WRITE 0x1e 	// request write to flash; who, 32bit addr, 8bit length, bytes
#define WRITE_CONF 0x1f 	// confirm a write to memory; who, addr32, len8
#define ERASE_MEM 0x20 	// erase memory range froms start to end
#define ERASE_CONF 0x21 	// confirm memory erased (0) or not (!0)
#define GET_STATS 0x22 	// get statistics from other end
#define CLEAR_STATS 0x23 	// clear stats from other end
#define STATS 0x24 	// stats
#define SET_GUID 0x25 	// set a GUID value - array of pair of guid/value
#define GET_GUID 0x26 	// request GUID value - array of GUIDs
#define GUID 0x27 	// GUID followed by value - array of GUID value pairs
#define GET_HW_DESC 0x28 	// request hardware description
#define HW_DESC 0x29 	// return hardware description
#define SET_PARAM 0x2a 	// set a parameter: 32 bit parameter tag followed by 32 bit value
#define GET_PARAM 0x2b 	// get a parameter value
#define PARAM 0x2c 	// parameter followed by value
#define MODBUS 0x2d 	// Modbus packet id
#define NXFILE 0x2e 	// File transfer
#define ALT 0x2f 	// Alarms, Logs, Trends
#define FIRMWARE 0x30 	// Deal with firmware versions

#endif